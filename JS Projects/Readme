# 30 Days of JavaScript: A Project-Based Learning Journey

This repository contains **30 JavaScript projects** built over 30 days to master JavaScript for web development, align with modern industry practices, and prepare for technical interviews. Each project progressively increases in complexity, covering core JavaScript concepts, ES6+ features, DOM manipulation, asynchronous programming, APIs, modern frameworks (React), and full-stack development (Node.js). The projects are designed to build practical, real-world applications, fostering a deep understanding of JavaScript and creating a robust portfolio.

## Overview
- **Goal**: Gain a comprehensive understanding of JavaScript, from fundamentals to advanced topics, while building 30 unique projects.
- **Structure**: Divided into three phases:
  - **Beginner (Days 1–10)**: Core JavaScript and DOM manipulation.
  - **Intermediate (Days 11–20)**: ES6+, asynchronous programming, and APIs.
  - **Advanced (Days 21–30)**: React, Node.js, and full-stack integration.
- **Tools**: Built with HTML, CSS, JavaScript (ES6+), React, Node.js, and deployed on platforms like GitHub Pages or Netlify.
- **Learning Outcomes**: Master key JavaScript concepts (e.g., closures, promises, state management), practice modern development workflows (e.g., npm, Vite), and prepare for interviews with a focus on explaining the "why" behind each feature.

## How to Use This Repository
- Each project is contained in its own folder (e.g., `day-01-todo-list`).
- Run projects locally by opening `index.html` in a browser or setting up a local server for Node.js projects.
- Live/demo links are provided for deployed projects (to be updated after deployment).
- Use this repository to explore the code, learn from detailed comments, and adapt projects for your portfolio.

## Projects

### Phase 1: Beginner (Days 1–10) – Core JavaScript and DOM Basics

#### Day 1: Interactive To-Do List
- **Objective**: Learn variables, arrays, and DOM manipulation.
- **Step 1: Basic Feature**: Add tasks via an input field, display them in a list, and remove tasks with a delete button.
- **Step 2: Add Features**: Mark tasks as completed with checkboxes, persist tasks in `localStorage`, add input validation, and support Enter key submission.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `querySelector`, `addEventListener`, array methods (`push`, `splice`, `map`), `localStorage`, event delegation.

#### Day 2: Digital Clock
- **Objective**: Understand the `Date` object and `setInterval`.
- **Step 1: Basic Feature**: Display real-time hours, minutes, and seconds in 24-hour format.
- **Step 2: Add Features**: Toggle between 12h/24h formats, display the date, add theme toggling (light/dark mode).
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `setInterval`, `Date`, `padStart`, DOM updates, `localStorage`.

#### Day 3: Tip Calculator
- **Objective**: Practice functions and arithmetic operations.
- **Step 1: Basic Feature**: Input bill amount and tip percentage, calculate and display tip and total.
- **Step 2: Add Features**: Enable real-time calculations, split the bill among multiple people, save tip percentage in `localStorage`.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Form handling, `Number`, `toFixed`, `input` events, input validation.

#### Day 4: Color Flipper
- **Objective**: Explore random values and CSS manipulation.
- **Step 1: Basic Feature**: Change the page’s background to a random color from an array on button click.
- **Step 2: Add Features**: Display the color code (HEX/RGB), add a copy-to-clipboard button, toggle between HEX and RGB formats.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `Math.random`, DOM style manipulation, `navigator.clipboard`, string manipulation.

#### Day 5: Counter App
- **Objective**: Reinforce event handling and state management.
- **Step 1: Basic Feature**: Create a counter with increment, decrement, and reset buttons.
- **Step 2: Add Features**: Change text color based on count (e.g., green for positive), allow custom step sizes, add keyboard shortcuts (e.g., arrow keys).
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Event delegation, state variables, conditional logic, keyboard events.

#### Day 6: Image Slider
- **Objective**: Learn array iteration and DOM transitions.
- **Step 1: Basic Feature**: Cycle through images with next/previous buttons.
- **Step 2: Add Features**: Add automatic slideshow with `setInterval`, include navigation dots, implement smooth CSS transitions.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Array indexing, `setAttribute`, CSS transitions, `setInterval`.

#### Day 7: Modal Window
- **Objective**: Understand DOM events and visibility toggling.
- **Step 1: Basic Feature**: Open and close a modal with buttons or overlay click.
- **Step 2: Add Features**: Add keyboard support (ESC to close), implement fade animations, include a form inside the modal.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `classList`, event listeners, CSS display properties, keyboard events.

#### Day 8: FAQ Accordion
- **Objective**: Practice DOM traversal and toggle behavior.
- **Step 1: Basic Feature**: Expand/collapse FAQ answers on click, collapsing others.
- **Step 2: Add Features**: Add smooth height transitions, allow multiple open answers, implement search filtering.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `querySelectorAll`, event delegation, CSS height transitions, filtering.

#### Day 9: Basic Calculator
- **Objective**: Combine logic, functions, and event handling.
- **Step 1: Basic Feature**: Perform addition, subtraction, multiplication, and division via buttons.
- **Step 2: Add Features**: Support keyboard input, handle divide-by-zero errors, add a calculation history log.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Switch statements, form inputs, error handling, event listeners.

#### Day 10: Random Quote Generator
- **Objective**: Fetch and display data dynamically.
- **Step 1: Basic Feature**: Display a random quote from an array on button click.
- **Step 2: Add Features**: Add a share-to-X button, implement fade transitions, filter quotes by category.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Arrays, `Math.random`, DOM updates, Web Share API.

### Phase 2: Intermediate (Days 11–20) – Advanced JavaScript and APIs

#### Day 11: Local Storage To-Do List
- **Objective**: Learn `localStorage` for persistent data.
- **Step 1: Basic Feature**: Enhance the Day 1 to-do list to save tasks in `localStorage`.
- **Step 2: Add Features**: Allow task editing, add task categories, implement a clear-all button.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `localStorage`, JSON parsing, CRUD operations, event persistence.

#### Day 12: Weather App
- **Objective**: Understand asynchronous `fetch` and APIs.
- **Step 1: Basic Feature**: Fetch and display current weather for a user-entered city using a public API (e.g., OpenWeatherMap).
- **Step 2: Add Features**: Display a 5-day forecast, use geolocation for local weather, handle API errors.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `fetch`, promises, async/await, API key handling, error handling.

#### Day 13: Form Validator
- **Objective**: Master form handling and validation.
- **Step 1: Basic Feature**: Validate email and password inputs with real-time feedback.
- **Step 2: Add Features**: Add password strength checking, implement client-side submission, enhance accessibility (ARIA labels).
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Regular expressions, form events, DOM error handling, accessibility.

#### Day 14: Memory Card Game
- **Objective**: Explore arrays, loops, and game logic.
- **Step 1: Basic Feature**: Match pairs of cards with a flip animation, ending when all pairs are matched.
- **Step 2: Add Features**: Add a move counter and timer, implement a restart button, include flip animations.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Array shuffling, event delegation, CSS animations, game state management.

#### Day 15: Expense Tracker
- **Objective**: Practice array methods and state management.
- **Step 1: Basic Feature**: Add expenses (name, amount, date) and display total in a list.
- **Step 2: Add Features**: Enable editing/deleting expenses, filter by category/date, save to `localStorage`.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: ES6 array methods (`map`, `filter`, `reduce`), `localStorage`, CRUD operations.

#### Day 16: Searchable Table
- **Objective**: Learn dynamic filtering and DOM updates.
- **Step 1: Basic Feature**: Filter a table of data (e.g., users) based on search input.
- **Step 2: Add Features**: Add column sorting, implement pagination, highlight matched terms.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `filter`, dynamic DOM rendering, event listeners, pagination.

#### Day 17: Drag-and-Drop List
- **Objective**: Understand HTML5 Drag and Drop API.
- **Step 1: Basic Feature**: Reorder a list of items using drag-and-drop.
- **Step 2: Add Features**: Save order to `localStorage`, add visual feedback for drop zones, support touch devices.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Drag and Drop API, event handling, array reordering, touch events.

#### Day 18: GitHub User Search
- **Objective**: Deepen API and async skills.
- **Step 1: Basic Feature**: Search GitHub users and display profiles using the GitHub API.
- **Step 2: Add Features**: Show user repositories, handle API rate limits, add a loading spinner.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `fetch`, async/await, error handling, dynamic DOM rendering.

#### Day 19: Simple Note App
- **Objective**: Combine persistence, CRUD, and ES6.
- **Step 1: Basic Feature**: Create and display notes, stored in `localStorage`.
- **Step 2: Add Features**: Add edit/delete functionality, implement search filtering, support markdown formatting.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: ES6 modules, CRUD operations, event delegation, markdown parsing.

#### Day 20: Pomodoro Timer
- **Objective**: Combine timers, state, and UI.
- **Step 1: Basic Feature**: Build a 25-minute timer with start, pause, and reset buttons.
- **Step 2: Add Features**: Add short/long break cycles, include sound notifications, implement a progress circle.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `setInterval`, `clearInterval`, state management, CSS animations.

### Phase 3: Advanced (Days 21–30) – Frameworks, Modular Code, and Full-Stack

#### Day 21: React To-Do List
- **Objective**: Learn React basics (components, state).
- **Step 1: Basic Feature**: Build a to-do list with add/delete functionality using `useState`.
- **Step 2: Add Features**: Add task completion toggles, persist tasks in `localStorage`, implement filtering (all/active/completed).
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: React components, `useState`, `localStorage`, list rendering.

#### Day 22: React Weather App
- **Objective**: Integrate APIs with React.
- **Step 1: Basic Feature**: Fetch and display weather data for a city using React and an API.
- **Step 2: Add Features**: Show a 5-day forecast, implement geolocation, handle loading/error states.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `useEffect`, async/await, API integration, state management.

#### Day 23: React Pagination
- **Objective**: Learn state and list rendering in React.
- **Step 1: Basic Feature**: Paginate a list of items with next/previous buttons.
- **Step 2: Add Features**: Add page number buttons, implement infinite scroll, fetch data dynamically from an API.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `useState`, array slicing, component rendering, infinite scroll.

#### Day 24: React Form with Validation
- **Objective**: Master forms in React.
- **Step 1: Basic Feature**: Build a form with email/password validation and error messages.
- **Step 2: Add Features**: Add password strength indicators, implement submission feedback, use a form library (e.g., Formik).
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `useState`, controlled components, regex validation, form libraries.

#### Day 25: React Shopping Cart
- **Objective**: Understand state management in React.
- **Step 1: Basic Feature**: Add/remove items and calculate total price.
- **Step 2: Add Features**: Add quantity controls, use `useReducer` for state, implement a checkout simulation.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: `useState`, `useReducer`, array methods, state management.

#### Day 26: Node.js Task API
- **Objective**: Learn backend basics with Node.js.
- **Step 1: Basic Feature**: Build a REST API to create and retrieve tasks (GET, POST).
- **Step 2: Add Features**: Add update (PUT) and delete (DELETE) endpoints, validate inputs, use an in-memory database.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Express.js, REST endpoints, JSON handling, server-side JavaScript.

#### Day 27: Full-Stack To-Do App
- **Objective**: Connect React frontend to Node.js backend.
- **Step 1: Basic Feature**: Build a CRUD to-do list with React and a Node.js API.
- **Step 2: Add Features**: Implement delete/update functionality, add loading/error states, include basic authentication.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: React, Express, `fetch`, CORS, full-stack integration.

#### Day 28: Real-Time Chat App
- **Objective**: Learn WebSockets for real-time apps.
- **Step 1: Basic Feature**: Build a chat app with real-time messaging using Socket.IO and Node.js.
- **Step 2: Add Features**: Add user nicknames, support private messaging, persist messages in a database.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: Socket.IO, Node.js, real-time events, database integration.

#### Day 29: React Authentication App
- **Objective**: Implement authentication in React.
- **Step 1: Basic Feature**: Build a login/logout system with JWT and a Node.js backend.
- **Step 2: Add Features**: Add protected routes, implement user registration, include a “remember me” feature.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: JWT, React Router, protected routes, authentication flows.

#### Day 30: Portfolio Website
- **Objective**: Consolidate skills into a professional project.
- **Step 1: Basic Feature**: Build a React-based portfolio showcasing all 29 projects.
- **Step 2: Add Features**: Add a contact form with validation, implement light/dark mode, deploy to Netlify/GitHub Pages.
- **Live/Demo**: [Insert Live Link Here]
- **Skills Learned**: React, CSS frameworks (e.g., Tailwind), deployment, portfolio building.

## Setup Instructions
1. **Clone the Repository**:
   ```bash
   git clone https://github.com/your-username/30-days-javascript.git
   ```
2. **Navigate to a Project**:
   ```bash
   cd 30-days-javascript/day-XX-project-name
   ```
3. **Run Locally**:
   - For front-end projects: Open `index.html` in a browser or use a local server (e.g., `npx live-server`).
   - For Node.js projects: Run `npm install` and `node server.js` (ensure Node.js is installed).
4. **Deploy**:
   - Deploy front-end projects to GitHub Pages or Netlify.
   - Update the `Live/Demo` links in this README with the deployed URLs.

## Technologies Used
- **Languages**: JavaScript (ES6+), HTML, CSS
- **Frameworks/Libraries**: React, Node.js, Express.js, Socket.IO
- **Tools**: VS Code, Chrome DevTools, npm, Vite, Git, GitHub Pages, Netlify
- **APIs**: OpenWeatherMap, GitHub API

## Learning Outcomes
- **Core JavaScript**: Mastered variables, arrays, functions, DOM manipulation, and event handling.
- **ES6+**: Utilized arrow functions, destructuring, modules, and async/await.
- **APIs and Async**: Integrated public APIs with error handling and real-time data.
- **Frameworks**: Built component-based apps with React and REST APIs with Node.js.
- **Industry Practices**: Practiced modular code, version control, and deployment.
- **Interview Prep**: Gained confidence in explaining concepts like closures, promises, and state management.

## Future Improvements
- Add unit tests for projects using Jest.
- Enhance accessibility (e.g., ARIA labels, keyboard navigation).
- Integrate a CSS framework (e.g., Tailwind) for consistent styling.
- Expand backend projects with a database (e.g., MongoDB).

## Contributing
Feel free to fork this repository, submit pull requests, or suggest improvements via issues. Contributions to enhance code quality, add features, or improve documentation are welcome.

## License
This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgments
- Inspired by online JavaScript challenges and tutorials (e.g., MDN Web Docs, JavaScript.info).
- Built as part of a 30-day learning journey to master JavaScript for web development.

MIT License

Copyright (c) 2025 Tanish Kumar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
// -----------------------------------------------------------------------------
// ‚úÖ 1. What is "use strict"?
// -----------------------------------------------------------------------------

/**
 * "use strict" is a directive that enables **Strict Mode** in JavaScript.
 * It was introduced in ES5 (ECMAScript 2009) to catch **common coding mistakes**
 * and **unsafe actions** (like assigning to undeclared variables).
 * 
 * It must be the **first statement** in a file or function.
 */

"use strict";

// -----------------------------------------------------------------------------
// ‚úÖ 2. Benefits of Strict Mode
// -----------------------------------------------------------------------------

/**
 * üîπ Prevents use of undeclared variables
 * üîπ Eliminates silent JavaScript errors
 * üîπ Disallows duplicate parameter names
 * üîπ Makes `this` undefined in functions (not global)
 * üîπ Protects reserved keywords for future JS versions
 */

// -----------------------------------------------------------------------------
// ‚úÖ 3. Using "use strict"
// -----------------------------------------------------------------------------

// Global strict mode
"use strict";

// or local to a function
function test() {
  "use strict";
  // function body
}

// -----------------------------------------------------------------------------
// ‚úÖ 4. Example: Preventing Undeclared Variables
// -----------------------------------------------------------------------------

// Without strict mode (default JS behavior):
x = 10; // ‚úÖ Creates global variable (bad practice)

// With strict mode:
"use strict";
// y = 20; // ‚ùå ReferenceError: y is not defined

// -----------------------------------------------------------------------------
// ‚úÖ 5. Example: Preventing Assignment to Read-Only or Reserved Properties
// -----------------------------------------------------------------------------

// Object.defineProperty makes prop non-writable
const obj = {};
Object.defineProperty(obj, "id", { value: 101, writable: false });

// obj.id = 200; // ‚ùå TypeError in strict mode

// -----------------------------------------------------------------------------
// ‚úÖ 6. Example: Duplicate Parameter Names
// -----------------------------------------------------------------------------

// function sum(a, a) { return a + a; } // ‚ùå SyntaxError in strict mode

// -----------------------------------------------------------------------------
// ‚úÖ 7. Example: `this` in Regular Functions
// -----------------------------------------------------------------------------

function regular() {
  console.log(this); // ‚ùå undefined in strict mode (was global object in non-strict)
}
regular();

// -----------------------------------------------------------------------------
// ‚úÖ 8. Example: Reserved Keywords
// -----------------------------------------------------------------------------

// let interface = "abc"; // ‚ùå SyntaxError in strict mode

// -----------------------------------------------------------------------------
// ‚úÖ 9. Summary ‚Äì When to Use
// -----------------------------------------------------------------------------

/**
 * ‚úÖ Use `"use strict"` at the beginning of your scripts or functions
 * ‚úÖ It helps write cleaner, safer code
 * ‚úÖ It's required for ES6 modules (implied strict mode)
 * ‚úÖ Helps catch bugs early and enforces best practices
 */

// -----------------------------------------------------------------------------
// ‚úÖ 10. Interview Tip
// -----------------------------------------------------------------------------

/**
 * Common question:
 * Q: What is "use strict" in JS and what does it do?
 * A:
 * - It enables strict mode.
 * - Catches common mistakes (like undeclared variables).
 * - Makes JS behavior more predictable.
 * - Prevents unsafe operations.
 */

